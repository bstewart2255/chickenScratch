name: TypeScript Migration CI/CD

on:
  push:
    branches: [ main, staging, develop ]
  pull_request:
    branches: [ main, staging, develop ]
  workflow_call:

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    env:
      # CRITICAL: Explicitly override any GitHub repository variables for test environment
      # This prevents fallback to OS USER (which is 'root' in GitHub Actions)
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/signature_auth_test
      NODE_ENV: test
      API_SECRET_KEY: test-secret-key
      PGUSER: postgres
      DB_USER: postgres
      DB_HOST: localhost
      DB_PORT: 5432
      DB_NAME: signature_auth_test
      DB_PASSWORD: postgres
      # Ensure these are not inherited from repository variables
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: signature_auth_test
      # Additional safety: explicitly unset any potential root user variables
      USER: postgres
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signature_auth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Force Database User Variables
        run: |
          echo "üîß Forcing database user variables to prevent root user issues..."
          
          # Explicitly unset any problematic variables first
          unset DB_USER_ROOT
          unset PGUSER_ROOT
          unset POSTGRES_USER_ROOT
          
          # Force set the correct values (these will override any repository variables)
          export DB_USER=postgres
          export PGUSER=postgres
          export POSTGRES_USER=postgres
          export USER=postgres
          
          # Verify the values are set correctly
          echo "‚úÖ Forced database user variables:"
          echo "   DB_USER: $DB_USER"
          echo "   PGUSER: $PGUSER"
          echo "   POSTGRES_USER: $POSTGRES_USER"
          echo "   USER: $USER"
          
          # Double-check no root values
          if [[ "$DB_USER" == "root" ]] || [[ "$PGUSER" == "root" ]] || [[ "$POSTGRES_USER" == "root" ]]; then
            echo "‚ùå CRITICAL: Still detecting root user values after force set!"
            exit 1
          fi
          
          echo "‚úÖ All database user variables are correctly set to 'postgres'"

      - name: Debug Environment Variables
        run: |
          echo "=== OS Environment ==="
          echo "USER: $USER"
          echo "HOME: $HOME"
          echo "SHELL: $SHELL"
          echo ""
          echo "=== Database Environment Variables ==="
          echo "DATABASE_URL: ${DATABASE_URL:-Not set}"
          echo "DB_USER: ${DB_USER:-Not set}"
          echo "DB_HOST: ${DB_HOST:-Not set}"
          echo "DB_PORT: ${DB_PORT:-Not set}"
          echo "DB_NAME: ${DB_NAME:-Not set}"
          echo "PGUSER: ${PGUSER:-Not set}"
          echo "POSTGRES_USER: ${POSTGRES_USER:-Not set}"
          echo "POSTGRES_DB: ${POSTGRES_DB:-Not set}"
          echo ""
          echo "=== Environment Variable Analysis ==="
          echo "Expected DB_NAME for tests: signature_auth_test"
          echo "Actual DB_NAME: ${DB_NAME:-Not set}"
          if [[ "${DB_NAME}" != "signature_auth_test" ]]; then
            echo "‚ö†Ô∏è  WARNING: DB_NAME mismatch! Expected 'signature_auth_test', got '${DB_NAME}'"
          else
            echo "‚úÖ DB_NAME is correct for test environment"
          fi
          echo ""
          echo "=== Root User Check ==="
          echo "Checking if any database user variables are set to 'root':"
          if [[ "$DB_USER" == "root" ]]; then
            echo "‚ùå ERROR: DB_USER is set to 'root'"
            exit 1
          elif [[ "$DB_USER" != "" ]]; then
            echo "‚úÖ DB_USER is set to '$DB_USER' (not root)"
          else
            echo "‚ö†Ô∏è  DB_USER is not set"
          fi
          
          if [[ "$PGUSER" == "root" ]]; then
            echo "‚ùå ERROR: PGUSER is set to 'root'"
            exit 1
          elif [[ "$PGUSER" != "" ]]; then
            echo "‚úÖ PGUSER is set to '$PGUSER' (not root)"
          else
            echo "‚ö†Ô∏è  PGUSER is not set"
          fi
          
          if [[ "$POSTGRES_USER" == "root" ]]; then
            echo "‚ùå ERROR: POSTGRES_USER is set to 'root'"
            exit 1
          elif [[ "$POSTGRES_USER" != "" ]]; then
            echo "‚úÖ POSTGRES_USER is set to '$POSTGRES_USER' (not root)"
          else
            echo "‚ö†Ô∏è  POSTGRES_USER is not set"
          fi
          
          echo ""
          echo "=== DATABASE_URL Analysis ==="
          if [[ -n "$DATABASE_URL" ]]; then
            if echo "$DATABASE_URL" | grep -q "://root@"; then
              echo "‚ùå ERROR: DATABASE_URL contains 'root' user!"
              exit 1
            else
              echo "‚úÖ DATABASE_URL does not contain 'root' user"
              # Extract username from DATABASE_URL
              USERNAME=$(echo "$DATABASE_URL" | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
              echo "üìã DATABASE_URL username: $USERNAME"
            fi
          else
            echo "‚ö†Ô∏è  DATABASE_URL is not set"
          fi
          
          echo ""
          echo "=== Effective User Analysis ==="
          EFFECTIVE_USER="${DB_USER:-${PGUSER:-${POSTGRES_USER:-$USER}}}"
          echo "Effective database user: $EFFECTIVE_USER"
          if [[ "$EFFECTIVE_USER" == "root" ]]; then
            echo "‚ùå CRITICAL: Effective user is 'root' - this will cause connection failure!"
            exit 1
          else
            echo "‚úÖ Effective user is '$EFFECTIVE_USER' (safe)"
          fi

      - name: Run Database User Diagnostic
        run: ./scripts/fix-ci-database-user.sh

      - name: Check for Repository Variables Override
        run: |
          echo "üîç Checking for potential repository variable overrides..."
          
          # Check if any environment variables are being overridden by repository variables
          echo "Current environment after force set:"
          echo "DB_USER: '$DB_USER'"
          echo "PGUSER: '$PGUSER'"
          echo "POSTGRES_USER: '$POSTGRES_USER'"
          echo "USER: '$USER'"
          
          # Check if DATABASE_URL contains root
          if [[ -n "$DATABASE_URL" ]]; then
            echo "DATABASE_URL: '$DATABASE_URL'"
            if echo "$DATABASE_URL" | grep -q "://root@"; then
              echo "‚ùå WARNING: DATABASE_URL still contains root user!"
              echo "This might be from a repository variable or secret"
            else
              echo "‚úÖ DATABASE_URL does not contain root user"
            fi
          fi
          
          # Final validation
          EFFECTIVE_USER="${DB_USER:-${PGUSER:-${POSTGRES_USER:-$USER}}}"
          echo "Effective database user: '$EFFECTIVE_USER'"
          
          if [[ "$EFFECTIVE_USER" == "root" ]]; then
            echo "‚ùå CRITICAL: Repository variables are overriding our settings!"
            echo "Please check GitHub repository variables/secrets for 'root' values"
            exit 1
          else
            echo "‚úÖ Effective user is safe: '$EFFECTIVE_USER'"
          fi

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}-v2
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-v2
            ${{ runner.os }}-node-v2

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run type check (permissive)
        run: npm run type-check

      - name: Check database configuration
        run: npm run db:check-config

      - name: Run tests with coverage
        run: npm run test:coverage

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.node-version }}
          path: coverage/
          retention-days: 7

      - name: Check coverage thresholds
        run: |
          COVERAGE=$(npx nyc report --reporter=text-summary | grep 'Statements' | awk '{print $3}' | sed 's/%//')
          if (( $(echo "$COVERAGE < 90" | bc -l) )); then
            echo "Coverage dropped below 90% (current: $COVERAGE%)"
            exit 1
          fi
          echo "Coverage is at $COVERAGE% - meets threshold"

      - name: Build project
        run: npm run build

      - name: Run strict type check
        run: npm run type-check:strict || echo "Strict type check warnings (not failing CI)"

      - name: Performance benchmarks
        if: matrix.node-version == '18.x'
        run: npm run test:performance

      - name: Archive build artifacts
        if: matrix.node-version == '18.x'
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/
          retention-days: 7

  integration:
    name: Integration Tests
    needs: test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: signature_auth_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Force Database User Variables (Integration)
        run: |
          echo "üîß Forcing database user variables for integration tests..."
          
          # Force set the correct values
          export DB_USER=postgres
          export PGUSER=postgres
          export POSTGRES_USER=postgres
          export USER=postgres
          export DATABASE_URL=postgresql://postgres:postgres@localhost:5432/signature_auth_integration
          export DB_HOST=localhost
          export DB_PORT=5432
          export DB_NAME=signature_auth_integration
          export DB_PASSWORD=postgres
          
          echo "‚úÖ Integration test database variables set"

      - name: Setup database
        env:
          # CRITICAL: Explicitly set all database user variables to prevent root fallback
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/signature_auth_integration
          PGUSER: postgres
          DB_USER: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: signature_auth_integration
          DB_PASSWORD: postgres
          # Additional safety: explicitly unset any potential root user variables
          USER: postgres
        run: |
          npm run db:setup
          npm run db:migrate

      - name: Run integration tests
        env:
          # CRITICAL: Explicitly set all database user variables to prevent root fallback
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/signature_auth_integration
          NODE_ENV: test
          API_SECRET_KEY: test-secret-key
          PGUSER: postgres
          DB_USER: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: signature_auth_integration
          DB_PASSWORD: postgres
          # Additional safety: explicitly unset any potential root user variables
          USER: postgres
        run: |
          # Final check before running tests
          echo "üîç Final database user check before integration tests..."
          echo "DB_USER: '$DB_USER'"
          echo "PGUSER: '$PGUSER'"
          echo "USER: '$USER'"
          
          if [[ "$DB_USER" == "root" ]] || [[ "$PGUSER" == "root" ]]; then
            echo "‚ùå CRITICAL: Database user is still 'root' before integration tests!"
            exit 1
          fi
          
          npm run test:integration

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --production

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "Frontend bundle sizes:"
          ls -lh dist/frontend/*.js | awk '{print $5, $9}'
          echo ""
          echo "Backend bundle sizes:"
          ls -lh dist/backend/*.js | awk '{print $5, $9}'

  migration-status:
    name: Check Migration Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check migration status
        run: node scripts/show-migration-status.js

  ci-summary:
    name: CI Summary
    needs: [test, integration, security, bundle-analysis, migration-status]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "Test Suite: ${{ needs.test.result }}"
          echo "Integration Tests: ${{ needs.integration.result }}"
          echo "Security Scan: ${{ needs.security.result }}"
          echo "Bundle Analysis: ${{ needs.bundle-analysis.result }}"
          echo "Migration Status: ${{ needs.migration-status.result }}"
          
          if [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.integration.result }}" != "success" ]] || \
             [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "CI failed - critical checks did not pass"
            exit 1
          fi
          
          echo "All CI checks passed successfully!"