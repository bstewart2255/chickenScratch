name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_approval:
        description: 'Skip manual approval (use with caution)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18.x'

jobs:
  test:
    name: Run CI Checks
    uses: ./.github/workflows/ci.yml

  approval:
    name: Manual Approval
    needs: test
    runs-on: ubuntu-latest
    environment: production-approval
    if: github.event.inputs.skip_approval != 'true'
    
    steps:
      - name: Request deployment approval
        run: |
          echo "🚀 Production deployment requested"
          echo "Commit: ${{ github.sha }}"
          echo "Author: ${{ github.actor }}"
          echo "Please review and approve the deployment"

  backup:
    name: Backup Production Database
    needs: [test, approval]
    if: always() && needs.test.result == 'success'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Create database backup
        env:
          PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
          BACKUP_STORAGE_PATH: ${{ secrets.BACKUP_STORAGE_PATH }}
        run: |
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          BACKUP_FILE="prod-backup-$TIMESTAMP-${{ github.sha }}.sql"
          
          echo "Creating production database backup: $BACKUP_FILE"
          
          # Create backup using pg_dump
          pg_dump "$PRODUCTION_DATABASE_URL" > "$BACKUP_FILE"
          
          # Compress backup
          gzip "$BACKUP_FILE"
          
          # Upload to secure storage (implement based on your infrastructure)
          echo "Backup created: ${BACKUP_FILE}.gz"
          echo "backup_file=${BACKUP_FILE}.gz" >> $GITHUB_OUTPUT

      - name: Upload backup artifact
        uses: actions/upload-artifact@v3
        with:
          name: production-backup-${{ github.sha }}
          path: "*.gz"
          retention-days: 90

  deploy:
    name: Deploy to Production
    needs: [test, approval, backup]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --production

      - name: Build for production
        run: |
          npm run build
          echo "Build completed at $(date)"

      - name: Run pre-deployment checks
        run: |
          echo "Running pre-deployment validation..."
          node backend/pre-deploy-check.js

      - name: Create deployment package
        run: |
          # Include version info
          echo "${{ github.sha }}" > VERSION
          echo "$(date)" > DEPLOY_TIME
          
          tar -czf deployment-package.tar.gz \
            dist/ \
            package.json \
            package-lock.json \
            backend/schema.sql \
            backend/migrations/ \
            .migration-status.json \
            VERSION \
            DEPLOY_TIME

      - name: Upload deployment package
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-${{ github.sha }}
          path: deployment-package.tar.gz
          retention-days: 90

      - name: Deploy to production (Blue-Green)
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
          DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts

          # Create deployment directory with timestamp
          DEPLOY_DIR="deployment-$(date +%Y%m%d-%H%M%S)"
          
          # Transfer and extract package
          scp -i ~/.ssh/deploy_key deployment-package.tar.gz $PRODUCTION_USER@$PRODUCTION_HOST:/tmp/
          
          ssh -i ~/.ssh/deploy_key $PRODUCTION_USER@$PRODUCTION_HOST << 'ENDSSH'
            set -e
            
            # Create new deployment directory (green)
            cd $PRODUCTION_PATH
            mkdir -p $DEPLOY_DIR
            cd $DEPLOY_DIR
            
            # Extract deployment package
            tar -xzf /tmp/deployment-package.tar.gz
            rm /tmp/deployment-package.tar.gz
            
            # Install production dependencies
            npm ci --production
            
            # Run database migrations with transaction
            echo "Running database migrations..."
            npm run db:migrate:production
            
            # Start new version on alternate port (green)
            PORT=3001 pm2 start dist/backend/server.js --name signature-auth-green \
              --env production \
              --max-memory-restart 2G \
              --instances 2 \
              --error /var/log/signature-auth/prod-error.log \
              --output /var/log/signature-auth/prod-out.log
            
            # Wait for green to be healthy
            echo "Waiting for green deployment to be healthy..."
            sleep 15
            
            # Health check green deployment
            for i in {1..10}; do
              if curl -f -s -o /dev/null -w "%{http_code}" "http://localhost:3001/health" | grep -q "200"; then
                echo "Green deployment healthy!"
                break
              fi
              if [ $i -eq 10 ]; then
                echo "Green deployment health check failed!"
                pm2 delete signature-auth-green
                exit 1
              fi
              sleep 3
            done
            
            # Switch load balancer to green (update nginx/haproxy config)
            echo "Switching traffic to green deployment..."
            sudo nginx -s reload || sudo systemctl reload nginx
            
            # Stop blue deployment
            pm2 delete signature-auth-blue || true
            
            # Rename green to blue for next deployment
            pm2 restart signature-auth-green --name signature-auth-blue
            
            # Update symlinks
            cd $PRODUCTION_PATH
            rm -f previous
            if [ -L current ]; then
              mv current previous
            fi
            ln -s $DEPLOY_DIR current
            
            # Save PM2 configuration
            pm2 save
            
            # Cleanup old deployments (keep last 10)
            ls -dt deployment-* | tail -n +11 | xargs rm -rf || true
            
            echo "Production deployment completed successfully!"
          ENDSSH

      - name: Verify deployment
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          echo "Verifying production deployment..."
          sleep 10
          
          # Comprehensive health checks
          for endpoint in "/health" "/api/health" "/metrics"; do
            echo "Checking $endpoint..."
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$PRODUCTION_URL$endpoint" || echo "000")
            if [[ "$STATUS" != "200" && "$STATUS" != "404" ]]; then
              echo "ERROR: Endpoint $endpoint returned status $STATUS"
              exit 1
            fi
          done
          
          echo "All health checks passed!"

      - name: Run production smoke tests
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          echo "Running production smoke tests..."
          
          # Test critical endpoints without side effects
          curl -f "$PRODUCTION_URL/health"
          
          # Add more smoke tests as needed
          echo "Smoke tests completed successfully!"

      - name: Monitor deployment
        run: |
          echo "Monitoring deployment for 5 minutes..."
          echo "Check your monitoring dashboards for:"
          echo "- Error rates"
          echo "- Response times"
          echo "- CPU/Memory usage"
          echo "- Database connections"

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Production Release ${{ github.run_number }}
          body: |
            Production deployment of commit ${{ github.sha }}
            
            Deployed by: ${{ github.actor }}
            Deployment time: ${{ steps.deploy.outputs.deploy_time }}
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    environment: production-rollback
    needs: deploy
    if: failure() || cancelled()
    
    steps:
      - name: Approve rollback
        run: |
          echo "⚠️  Production deployment failed or was cancelled"
          echo "Rollback must be manually approved"

      - name: Perform rollback
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          PRODUCTION_PATH: ${{ secrets.PRODUCTION_PATH }}
          DEPLOY_SSH_KEY: ${{ secrets.DEPLOY_SSH_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$DEPLOY_SSH_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $PRODUCTION_HOST >> ~/.ssh/known_hosts
          
          # Perform rollback
          ssh -i ~/.ssh/deploy_key $PRODUCTION_USER@$PRODUCTION_HOST << 'ENDSSH'
            set -e
            
            cd $PRODUCTION_PATH
            
            if [ ! -L previous ]; then
              echo "No previous deployment found!"
              exit 1
            fi
            
            PREVIOUS=$(readlink previous)
            echo "Rolling back to: $PREVIOUS"
            
            # Start previous version as green
            cd $PREVIOUS
            PORT=3001 pm2 start dist/backend/server.js --name signature-auth-green \
              --env production \
              --instances 2
            
            # Wait for green to be healthy
            sleep 15
            
            # Switch traffic back
            sudo nginx -s reload || sudo systemctl reload nginx
            
            # Stop current (failed) deployment
            pm2 delete signature-auth-blue || true
            
            # Rename green to blue
            pm2 restart signature-auth-green --name signature-auth-blue
            
            # Update symlinks
            cd $PRODUCTION_PATH
            rm -f current
            ln -s $PREVIOUS current
            
            echo "Rollback completed!"
          ENDSSH

      - name: Notify rollback
        run: |
          echo "❗ Production has been rolled back"
          echo "Previous version restored"
          echo "Please investigate the deployment failure"

  notify:
    name: Deployment Notification
    needs: [deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.deploy.result }}" == "success" ]]; then
            echo "✅ Production deployment successful!"
            echo "Version: ${{ github.sha }}"
            echo "Deployed by: ${{ github.actor }}"
            # Add your notification service integration here (Slack, email, etc.)
          else
            echo "❌ Production deployment failed!"
            echo "Version: ${{ github.sha }}"
            echo "Failed by: ${{ github.actor }}"
            # Add your alert service integration here
          fi